"use client";

import React, { useState, useEffect } from 'react';

interface ProfileData {
  archetype: string;
  core_drives_and_values: string;
  cognitive_style: string;
  leadership_style: string;
  communication_style: string;
  risk_and_ambition: string;
  growth_and_blind_spots: string;
  summary: string;
}

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  profileJson: string;
}

const sectionConfig = {
  core_drives_and_values: { 
    icon: 'ï¿½', 
    title: 'Core Drives & Values',
    color: 'from-[#f8faf6] to-[#e8f0e3]',
    iconBg: 'bg-[#8a9a5b]/10'
  },
  cognitive_style: { 
    icon: 'ï¿½', 
    title: 'Cognitive Style',
    color: 'from-[#f8faf6] to-[#eff2ed]',
    iconBg: 'bg-[#55613b]/10'
  },
  leadership_style: { 
    icon: 'ðŸ‘‘', 
    title: 'Leadership Style',
    color: 'from-[#f9faf7] to-[#e8f0e3]',
    iconBg: 'bg-[#8a9a5b]/15'
  },
  communication_style: { 
    icon: 'ðŸ’¬', 
    title: 'Communication Style',
    color: 'from-[#f7f9f5] to-[#e6efe1]',
    iconBg: 'bg-[#55613b]/15'
  },
  risk_and_ambition: { 
    icon: 'ðŸŽ¯', 
    title: 'Risk & Ambition',
    color: 'from-[#f8faf6] to-[#e7efdf]',
    iconBg: 'bg-[#8a9a5b]/20'
  },
  growth_and_blind_spots: { 
    icon: 'ðŸŒ±', 
    title: 'Growth & Development',
    color: 'from-[#f6f8f4] to-[#e5eddd]',
    iconBg: 'bg-[#55613b]/20'
  }
};

export default function ProfileModal({ isOpen, onClose, profileJson }: ProfileModalProps) {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [isSharing, setIsSharing] = useState(false);
  const [shareSuccess, setShareSuccess] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedCards, setExpandedCards] = useState<{ [key: string]: boolean }>({});

  useEffect(() => {
    if (profileJson) {
      try {
        let jsonToParse = profileJson;
        const jsonMatch = profileJson.match(/(\{[\s\S]*\})/);
        if (jsonMatch) {
          jsonToParse = jsonMatch[1];
        }
        const parsed = JSON.parse(jsonToParse);
        setProfile(parsed);
      } catch (e) {
        console.error('Failed to parse profile JSON:', e);
      }
    }
  }, [profileJson]);

  const handleShare = async () => {
    setIsSharing(true);
    try {
      const shareText = `My Sage Psychographic Profile: ${profile?.archetype}\n\n${profile?.summary}\n\nGenerated by Sage AI Coach`;
      
      if (navigator.share) {
        await navigator.share({
          title: 'My Sage Psychographic Profile',
          text: shareText,
          url: window.location.href
        });
      } else {
        await navigator.clipboard.writeText(shareText);
        setShareSuccess(true);
        setTimeout(() => setShareSuccess(false), 2000);
      }
    } catch (error) {
      console.error('Share failed:', error);
    } finally {
      setIsSharing(false);
    }
  };

  const toggleCardExpansion = (key: string) => {
    setExpandedCards(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  if (!isOpen || !profile) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/40 backdrop-blur-md">
      <div className="bg-white rounded-3xl shadow-2xl max-w-5xl w-full max-h-[95vh] overflow-hidden animate-in slide-in-from-bottom-4 duration-300 flex flex-col">
        
        {/* Hero Header */}
        <div className="relative bg-gradient-to-br from-[#f8faf6] via-white to-[#e8f0e3] p-6 border-b border-slate-100">
          <button
            onClick={onClose}
            className="absolute top-4 right-4 w-8 h-8 rounded-full bg-white/80 hover:bg-white shadow-sm flex items-center justify-center transition-all duration-200 hover:scale-110 z-10"
          >
            <svg className="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          
          <div className="text-center max-w-3xl mx-auto">
            <div className="inline-flex items-center justify-center w-14 h-14 rounded-full bg-gradient-to-br from-[#8a9a5b] to-[#55613b] shadow-lg mb-3">
              <span className="text-xl">ðŸŒŸ</span>
            </div>
            <h1 className="text-2xl font-bold text-slate-800 mb-2">
              {profile.archetype}
            </h1>
            <p className="text-slate-600 text-base leading-relaxed">
              {profile.summary}
            </p>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white border-b border-slate-100 px-6 pt-3 pb-1">
          <div className="flex space-x-1">
            <button
              onClick={() => setActiveTab('overview')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'overview' 
                  ? 'bg-[#8a9a5b]/10 text-[#55613b] shadow-sm border border-[#8a9a5b]/20' 
                  : 'text-slate-600 hover:text-slate-800 hover:bg-slate-50'
              }`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('details')}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                activeTab === 'details' 
                  ? 'bg-[#8a9a5b]/10 text-[#55613b] shadow-sm border border-[#8a9a5b]/20' 
                  : 'text-slate-600 hover:text-slate-800 hover:bg-slate-50'
              }`}
            >
              Detailed Analysis
            </button>
          </div>
        </div>

        {/* Content Area */}
        <div className="p-6 overflow-y-auto flex-1">
          {activeTab === 'overview' ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-3">
              {Object.entries(sectionConfig).map(([key, config]) => {
                const value = profile[key as keyof ProfileData];
                if (!value) return null;
                
                const isExpanded = expandedCards[key];
                const needsExpansion = value.length > 180;
                const displayText = isExpanded ? value : (needsExpansion ? value.slice(0, 180) + '...' : value);
                
                return (
                  <div
                    key={key}
                    className={`bg-gradient-to-br ${config.color} rounded-2xl p-4 border border-white/50 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-[1.02] ${isExpanded ? 'md:col-span-2 lg:col-span-3' : 'min-h-[160px]'} flex flex-col`}
                  >
                    <div className="flex items-center mb-2">
                      <div className={`w-8 h-8 rounded-lg ${config.iconBg} flex items-center justify-center mr-2 shadow-sm flex-shrink-0`}>
                        <span className="text-base">{config.icon}</span>
                      </div>
                      <h3 className="font-semibold text-slate-800 text-xs leading-tight">
                        {config.title}
                      </h3>
                    </div>
                    <p className={`text-slate-700 leading-relaxed flex-1 ${isExpanded ? 'text-sm' : 'text-xs overflow-hidden'}`}>
                      {displayText}
                    </p>
                    {needsExpansion && (
                      <button
                        onClick={() => toggleCardExpansion(key)}
                        className="mt-2 text-xs font-medium text-[#55613b] hover:text-[#8a9a5b] transition-colors duration-200 self-start flex items-center gap-1"
                      >
                        {isExpanded ? (
                          <>
                            Show Less
                            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                            </svg>
                          </>
                        ) : (
                          <>
                            More
                            <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                            </svg>
                          </>
                        )}
                      </button>
                    )}
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="space-y-6 max-w-4xl mx-auto">
              {Object.entries(sectionConfig).map(([key, config]) => {
                const value = profile[key as keyof ProfileData];
                if (!value) return null;
                
                return (
                  <div
                    key={key}
                    className="bg-white rounded-2xl p-6 border border-slate-100 shadow-sm hover:shadow-md transition-all duration-300"
                  >
                    <div className="flex items-center mb-4">
                      <div className={`w-12 h-12 rounded-xl ${config.iconBg} flex items-center justify-center mr-4 shadow-sm`}>
                        <span className="text-xl">{config.icon}</span>
                      </div>
                      <h3 className="text-xl font-semibold text-slate-800">
                        {config.title}
                      </h3>
                    </div>
                    <p className="text-slate-700 leading-relaxed">
                      {value}
                    </p>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Action Footer */}
        <div className="bg-slate-50 border-t border-slate-100 p-4">
          <div className="flex justify-center space-x-3">
            <button
              onClick={handleShare}
              disabled={isSharing}
              className="flex items-center px-6 py-3 bg-gradient-to-r from-[#8a9a5b] to-[#55613b] text-white rounded-xl font-medium shadow-sm hover:shadow-md transition-all duration-200 hover:scale-105 disabled:opacity-50"
            >
              {isSharing ? (
                <>
                  <svg className="w-4 h-4 mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Sharing...
                </>
              ) : (
                <>
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                  </svg>
                  {shareSuccess ? 'Copied!' : 'Share'}
                </>
              )}
            </button>
            
            <button
              onClick={onClose}
              className="flex items-center px-6 py-3 bg-white border border-slate-200 text-slate-700 hover:bg-slate-50 rounded-xl font-medium shadow-sm hover:shadow-md transition-all duration-200 hover:scale-105"
            >
              <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Close
            </button>
          </div>
          
          <div className="text-center mt-4">
            <p className="text-xs text-slate-500">
              Generated by Sage AI Coach â€¢ Your professional archetype
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}