"use client";

import React, { useState, useEffect } from 'react';

interface ProfileData {
  archetype: string;
  core_drives_and_values: string;
  cognitive_style: string;
  leadership_style: string;
  communication_style: string;
  risk_and_ambition: string;
  growth_and_blind_spots: string;
  summary: string;
}

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  profileJson: string;
}

const archetypeEmojis: { [key: string]: string } = {
  'visionary': 'üöÄ',
  'strategist': 'üß†',
  'builder': 'üèóÔ∏è',
  'refiner': '‚ú®',
  'grounded': 'üå±',
  'restless': '‚ö°',
  'quiet': 'ü§´',
  'bold': 'üí™',
  'servant': 'ü§ù',
  'orchestrator': 'üéº',
  'synthesizer': 'üîó',
  'executor': '‚ö°',
  'default': 'üåü'
};

const getArchetypeEmoji = (archetype: string): string => {
  const lowerArchetype = archetype.toLowerCase();
  for (const [key, emoji] of Object.entries(archetypeEmojis)) {
    if (lowerArchetype.includes(key)) {
      return emoji;
    }
  }
  return archetypeEmojis.default;
};

const sectionIcons = {
  core_drives_and_values: 'üíé',
  cognitive_style: 'üß†',
  leadership_style: 'üëë',
  communication_style: 'üí¨',
  risk_and_ambition: 'üéØ',
  growth_and_blind_spots: 'üå±',
  summary: 'üìù'
};

export default function ProfileModal({ isOpen, onClose, profileJson }: ProfileModalProps) {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [isSharing, setIsSharing] = useState(false);
  const [shareSuccess, setShareSuccess] = useState(false);
  // Track expanded state for each section
  const [expandedSections, setExpandedSections] = useState<{ [key: string]: boolean }>({});

  useEffect(() => {
    if (profileJson) {
      try {
        let jsonToParse = profileJson;
        // Try to extract JSON if wrapped in other content
        const jsonMatch = profileJson.match(/(\{[\s\S]*\})/);
        if (jsonMatch) {
          jsonToParse = jsonMatch[1];
        }
        const parsed = JSON.parse(jsonToParse);
        setProfile(parsed);
      } catch (e) {
        console.error('Failed to parse profile JSON:', e);
        console.error('Profile JSON content:', profileJson);
      }
    }
  }, [profileJson]);

  const handleShare = async () => {
    setIsSharing(true);
    try {
      const shareText = `My Sage Psychographic Profile: ${profile?.archetype}\n\n${profile?.summary}\n\nGenerated by Sage AI Coach`;
      
      if (navigator.share) {
        await navigator.share({
          title: 'My Sage Psychographic Profile',
          text: shareText,
          url: window.location.href
        });
      } else {
        await navigator.clipboard.writeText(shareText);
        setShareSuccess(true);
        setTimeout(() => setShareSuccess(false), 2000);
      }
    } catch (error) {
      console.error('Share failed:', error);
    } finally {
      setIsSharing(false);
    }
  };

  const downloadAsImage = () => {
    // This would require html2canvas or similar library
    // For now, we'll just copy to clipboard
    handleShare();
  };

  // Toggle section expansion
  const toggleSection = (key: string) => {
    setExpandedSections((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  if (!isOpen || !profile) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/60 backdrop-blur-sm">
      <div className="bg-white rounded-3xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden animate-fade-in flex flex-col">
        {/* Header */}
        <div className="relative p-8 bg-gradient-to-br from-[#f8faf6] to-[#e8f0e3] border-b border-gray-100 shrink-0">
          <button
            onClick={onClose}
            className="absolute top-6 right-6 w-10 h-10 rounded-full bg-white/80 hover:bg-white shadow-lg flex items-center justify-center transition-all duration-200 hover:scale-110"
          >
            <svg className="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          
          {/* Archetype Section */}
          <div className="text-center mb-6">
            <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-br from-[#8a9a5b] to-[#55613b] shadow-xl mb-4 animate-bounce">
              <span className="text-3xl">{getArchetypeEmoji(profile.archetype)}</span>
            </div>
            <h1 className="text-4xl font-bold text-[#2d3748] mb-2 animate-fade-in-up">
              {profile.archetype}
            </h1>
            <p className="text-lg text-[#4a5568] max-w-2xl mx-auto leading-relaxed">
              {profile.summary}
            </p>
          </div>
        </div>

        {/* Content */}
        <div className="p-8 overflow-y-auto grow">
          <div className="grid gap-8">
            {Object.entries(profile).map(([key, value]) => {
              if (key === 'archetype' || key === 'summary') return null;
              const isExpanded = expandedSections[key];
              const displayText = isExpanded || typeof value !== 'string' || value.length <= 120
                ? value
                : value.slice(0, 120) + '...';
              return (
                <div
                  key={key}
                  className="group bg-white rounded-2xl p-6 border border-gray-100 shadow-md hover:shadow-lg transition-all duration-300 hover:scale-[1.02] flex flex-col"
                  style={{ background: 'linear-gradient(135deg, #f8faf6 60%, #f1f5f1 100%)' }}
                >
                  <div className="flex items-center mb-3">
                    <div className="w-10 h-10 rounded-full flex items-center justify-center mr-3 text-2xl bg-[#f3f4f6] border border-[#e2e8f0] shadow-sm">
                      <span>{sectionIcons[key as keyof typeof sectionIcons]}</span>
                    </div>
                    <h3 className="text-lg font-semibold text-[#2d3748] capitalize tracking-tight">
                      {key.replace(/_/g, ' ').replace('and', '&')}
                    </h3>
                  </div>
                  <p className="text-[#4a5568] leading-relaxed text-base mb-2">
                    {displayText}
                  </p>
                  {typeof value === 'string' && value.length > 120 && (
                    <button
                      className="mt-1 text-sm text-[#8a9a5b] hover:underline focus:outline-none font-medium flex items-center gap-1"
                      onClick={() => toggleSection(key)}
                    >
                      {isExpanded ? (
                        <>
                          Show Less <span className="text-xs">‚ñ≤</span>
                        </>
                      ) : (
                        <>
                          Show More <span className="text-xs">‚ñº</span>
                        </>
                      )}
                    </button>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* Footer */}
        <div className="p-6 bg-gray-50 border-t border-gray-100 shrink-0">
          <div className="flex gap-4 justify-center">
            <button
              onClick={handleShare}
              disabled={isSharing}
              className="flex items-center px-6 py-3 bg-gradient-to-r from-[#8a9a5b] to-[#55613b] text-white rounded-xl font-semibold hover:shadow-lg transition-all duration-200 hover:scale-105 disabled:opacity-50"
            >
              {isSharing ? (
                <>
                  <svg className="w-5 h-5 mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Sharing...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                  </svg>
                  {shareSuccess ? 'Copied!' : 'Share Profile'}
                </>
              )}
            </button>
            
            <button
              onClick={downloadAsImage}
              className="flex items-center px-6 py-3 bg-white border-2 border-[#8a9a5b] text-[#8a9a5b] rounded-xl font-semibold hover:bg-[#8a9a5b] hover:text-white transition-all duration-200 hover:scale-105"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Save
            </button>
          </div>
          
          <div className="text-center mt-4">
            <p className="text-sm text-gray-500">
              Generated by Sage AI Coach ‚Ä¢ Share your unique professional archetype
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}