"use client";

import React, { useState, useEffect } from 'react';

interface ProfileData {
  archetype: string;
  core_drives_and_values: string;
  cognitive_style: string;
  leadership_style: string;
  communication_style: string;
  risk_and_ambition: string;
  growth_and_blind_spots: string;
  summary: string;
  strength_signatures?: Array<{
    trait: string;
    evidence: string;
    why_it_matters: string;
  }>;
}

interface ProfileModalProps {
  isOpen: boolean;
  onClose: () => void;
  profileJson: string;
}

const sectionConfig = {
  core_drives_and_values: { 
    icon: '‚ö°', 
    title: 'Core Drives & Values',
    subtitle: 'What motivates you',
    color: 'from-blue-50/80 via-indigo-50/60 to-purple-50/40',
    iconBg: 'bg-gradient-to-br from-blue-500 to-indigo-600',
    borderColor: 'border-blue-200/30',
    textColor: 'text-blue-900'
  },
  cognitive_style: { 
    icon: 'üß†', 
    title: 'Cognitive Style',
    subtitle: 'How you think and process',
    color: 'from-emerald-50/80 via-teal-50/60 to-cyan-50/40',
    iconBg: 'bg-gradient-to-br from-emerald-500 to-teal-600',
    borderColor: 'border-emerald-200/30',
    textColor: 'text-emerald-900'
  },
  leadership_style: { 
    icon: 'üéñÔ∏è', 
    title: 'Leadership Style',
    subtitle: 'How you lead and influence',
    color: 'from-amber-50/80 via-orange-50/60 to-red-50/40',
    iconBg: 'bg-gradient-to-br from-amber-500 to-orange-600',
    borderColor: 'border-amber-200/30',
    textColor: 'text-amber-900'
  },
  communication_style: { 
    icon: 'üó£Ô∏è', 
    title: 'Communication Style',
    subtitle: 'How you connect with others',
    color: 'from-violet-50/80 via-purple-50/60 to-fuchsia-50/40',
    iconBg: 'bg-gradient-to-br from-violet-500 to-purple-600',
    borderColor: 'border-violet-200/30',
    textColor: 'text-violet-900'
  },
  risk_and_ambition: { 
    icon: 'üöÄ', 
    title: 'Risk & Ambition',
    subtitle: 'Your approach to challenges',
    color: 'from-rose-50/80 via-pink-50/60 to-red-50/40',
    iconBg: 'bg-gradient-to-br from-rose-500 to-pink-600',
    borderColor: 'border-rose-200/30',
    textColor: 'text-rose-900'
  },
  growth_and_blind_spots: { 
    icon: 'üìà', 
    title: 'Growth & Development',
    subtitle: 'Areas for improvement',
    color: 'from-lime-50/80 via-green-50/60 to-emerald-50/40',
    iconBg: 'bg-gradient-to-br from-lime-500 to-green-600',
    borderColor: 'border-lime-200/30',
    textColor: 'text-lime-900'
  }
};

export default function ProfileModal({ isOpen, onClose, profileJson }: ProfileModalProps) {
  const [profile, setProfile] = useState<ProfileData | null>(null);
  const [isSharing, setIsSharing] = useState(false);
  const [shareSuccess, setShareSuccess] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');
  const [expandedCards, setExpandedCards] = useState<{ [key: string]: boolean }>({});

  useEffect(() => {
    if (profileJson) {
      try {
        let jsonToParse = profileJson;
        const jsonMatch = profileJson.match(/(\{[\s\S]*\})/);
        if (jsonMatch) {
          jsonToParse = jsonMatch[1];
        }
        const parsed = JSON.parse(jsonToParse);
        setProfile(parsed);
      } catch (e) {
        console.error('Failed to parse profile JSON:', e);
      }
    }
  }, [profileJson]);

  const handleShare = async () => {
    setIsSharing(true);
    try {
      const shareText = `My Sage Executive Profile: ${profile?.archetype}\n\n${profile?.summary}\n\nGenerated by Sage AI Coach`;
      
      if (navigator.share) {
        await navigator.share({
          title: 'My Sage Executive Profile',
          text: shareText,
          url: window.location.href
        });
      } else {
        await navigator.clipboard.writeText(shareText);
        setShareSuccess(true);
        setTimeout(() => setShareSuccess(false), 2000);
      }
    } catch (error) {
      console.error('Share failed:', error);
    } finally {
      setIsSharing(false);
    }
  };

  const toggleCardExpansion = (key: string) => {
    setExpandedCards(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  if (!isOpen || !profile) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-3 md:p-6">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-slate-900/60 backdrop-blur-md transition-opacity duration-300"
        onClick={onClose}
      />
      
      {/* Modal */}
      <div className="relative bg-white rounded-2xl md:rounded-3xl shadow-2xl max-w-6xl w-full max-h-[95vh] overflow-hidden animate-in slide-in-from-bottom-4 duration-500 flex flex-col">
        
        {/* Elegant Header */}
        <div className="relative overflow-hidden">
          {/* Background Pattern */}
          <div className="absolute inset-0 bg-gradient-to-br from-slate-50 via-gray-50 to-zinc-100" />
          <div className="absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(120,119,198,0.1),transparent_50%)] bg-[radial-gradient(circle_at_70%_80%,rgba(255,87,51,0.1),transparent_50%)]" />
          
          {/* Content */}
          <div className="relative p-6 md:p-8 text-center">
            {/* Close Button */}
            <button
              onClick={onClose}
              className="absolute top-4 right-4 w-10 h-10 rounded-full bg-white/90 hover:bg-white shadow-lg flex items-center justify-center transition-all duration-200 hover:scale-110 group"
            >
              <svg className="w-5 h-5 text-slate-600 group-hover:text-slate-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
            
            {/* Profile Header */}
            <div className="max-w-2xl mx-auto">
              <div className="inline-flex items-center justify-center w-16 h-16 md:w-20 md:h-20 rounded-2xl bg-gradient-to-br from-indigo-500 via-purple-600 to-pink-500 shadow-xl mb-4 md:mb-6">
                <span className="text-2xl md:text-3xl">‚ú®</span>
              </div>
              <h1 className="text-2xl md:text-4xl font-bold text-slate-800 mb-3 md:mb-4 leading-tight">
                {profile.archetype}
              </h1>
              <p className="text-slate-600 text-base md:text-lg leading-relaxed max-w-xl mx-auto">
                {profile.summary}
              </p>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white/95 backdrop-blur-sm border-b border-slate-200/60 px-6 py-4">
          <div className="flex justify-center space-x-1">
            <button
              onClick={() => setActiveTab('overview')}
              className={`px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-300 ${
                activeTab === 'overview' 
                  ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg shadow-indigo-500/30 scale-105' 
                  : 'text-slate-600 hover:text-slate-800 hover:bg-slate-100/80'
              }`}
            >
              üìä Overview
            </button>
            <button
              onClick={() => setActiveTab('details')}
              className={`px-6 py-3 rounded-xl text-sm font-semibold transition-all duration-300 ${
                activeTab === 'details' 
                  ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-lg shadow-indigo-500/30 scale-105' 
                  : 'text-slate-600 hover:text-slate-800 hover:bg-slate-100/80'
              }`}
            >
              üîç Deep Dive
            </button>
          </div>
        </div>

        {/* Content Area */}
        <div className="p-4 md:p-6 overflow-y-auto flex-1 bg-gradient-to-br from-slate-50/50 to-gray-50/30">
          {activeTab === 'overview' ? (
            <div className="grid gap-4 md:gap-6 md:grid-cols-2 lg:grid-cols-3 max-w-7xl mx-auto">
              {Object.entries(sectionConfig).map(([key, config]) => {
                const value = profile[key as keyof ProfileData];
                if (!value || typeof value !== 'string') return null;
                
                const isExpanded = expandedCards[key];
                const needsExpansion = value.length > 200;
                const displayText = isExpanded ? value : (needsExpansion ? value.slice(0, 200) + '...' : value);
                
                return (
                  <div
                    key={key}
                    className={`group relative bg-gradient-to-br ${config.color} rounded-2xl border ${config.borderColor} shadow-sm hover:shadow-xl transition-all duration-500 hover:scale-[1.02] hover:-translate-y-1 ${
                      isExpanded ? 'md:col-span-2 lg:col-span-3' : ''
                    }`}
                  >
                    {/* Card Content */}
                    <div className="p-6">
                      {/* Header */}
                      <div className="flex items-start space-x-4 mb-4">
                        <div className={`w-12 h-12 rounded-xl ${config.iconBg} flex items-center justify-center shadow-lg flex-shrink-0 text-white`}>
                          <span className="text-xl">{config.icon}</span>
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className={`font-bold ${config.textColor} text-lg leading-tight mb-1`}>
                            {config.title}
                          </h3>
                          <p className="text-slate-600 text-sm font-medium">
                            {config.subtitle}
                          </p>
                        </div>
                      </div>
                      
                      {/* Content */}
                      <p className="text-slate-700 leading-relaxed text-sm md:text-base mb-4">
                        {displayText}
                      </p>
                      
                      {/* Expand Button */}
                      {needsExpansion && (
                        <button
                          onClick={() => toggleCardExpansion(key)}
                          className={`inline-flex items-center space-x-2 ${config.textColor} hover:opacity-80 transition-all duration-200 text-sm font-semibold group-hover:scale-105`}
                        >
                          <span>{isExpanded ? 'Show Less' : 'Read More'}</span>
                          <svg 
                            className={`w-4 h-4 transition-transform duration-300 ${isExpanded ? 'rotate-180' : ''}`} 
                            fill="none" 
                            stroke="currentColor" 
                            viewBox="0 0 24 24"
                          >
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          ) : (
            <div className="space-y-8 max-w-5xl mx-auto">
              {/* Strength Signatures Section */}
              {profile.strength_signatures && profile.strength_signatures.length > 0 && (
                <div className="bg-white/90 backdrop-blur-sm rounded-3xl p-6 md:p-8 shadow-lg border border-slate-200/60">
                  <div className="flex items-center mb-8">
                    <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center mr-6 shadow-xl">
                      <span className="text-2xl">‚≠ê</span>
                    </div>
                    <div>
                      <h3 className="text-2xl font-bold text-slate-800 mb-2">
                        Strength Signatures
                      </h3>
                      <p className="text-slate-600">Your unique professional DNA</p>
                    </div>
                  </div>
                  <div className="grid gap-6 md:grid-cols-2">
                    {profile.strength_signatures.map((signature, index) => (
                      <div key={index} className="bg-gradient-to-br from-white to-slate-50 rounded-2xl p-6 border border-slate-200/60 shadow-sm hover:shadow-md transition-all duration-300 hover:scale-[1.02]">
                        <h4 className="font-bold text-slate-800 mb-3 text-lg flex items-center">
                          <span className="w-2 h-2 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full mr-3"></span>
                          {signature.trait}
                        </h4>
                        <div className="space-y-3">
                          <div>
                            <span className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Evidence</span>
                            <p className="text-slate-700 text-sm leading-relaxed mt-1">{signature.evidence}</p>
                          </div>
                          <div>
                            <span className="text-xs font-semibold text-slate-500 uppercase tracking-wide">Why it matters</span>
                            <p className="text-slate-600 text-sm leading-relaxed mt-1">{signature.why_it_matters}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
              
              {/* Detailed Sections */}
              {Object.entries(sectionConfig).map(([key, config]) => {
                const value = profile[key as keyof ProfileData];
                if (!value || typeof value !== 'string') return null;
                
                return (
                  <div
                    key={key}
                    className="bg-white/90 backdrop-blur-sm rounded-3xl p-6 md:p-8 shadow-lg border border-slate-200/60 hover:shadow-xl transition-all duration-500 hover:-translate-y-1"
                  >
                    <div className="flex items-center mb-6">
                      <div className={`w-16 h-16 rounded-2xl ${config.iconBg} flex items-center justify-center mr-6 shadow-xl text-white`}>
                        <span className="text-2xl">{config.icon}</span>
                      </div>
                      <div>
                        <h3 className="text-2xl font-bold text-slate-800 mb-2">
                          {config.title}
                        </h3>
                        <p className="text-slate-600 font-medium">{config.subtitle}</p>
                      </div>
                    </div>
                    <div className="prose prose-slate max-w-none">
                      <p className="text-slate-700 leading-relaxed text-base md:text-lg">
                        {value}
                      </p>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {/* Action Footer */}
        <div className="bg-white/95 backdrop-blur-sm border-t border-slate-200/60 p-6">
          <div className="flex flex-col sm:flex-row justify-center items-center space-y-3 sm:space-y-0 sm:space-x-4">
            <button
              onClick={handleShare}
              disabled={isSharing}
              className="flex items-center px-8 py-3 bg-gradient-to-r from-indigo-500 to-purple-600 text-white rounded-xl font-semibold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed min-w-[140px] justify-center"
            >
              {isSharing ? (
                <>
                  <svg className="w-5 h-5 mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Sharing...
                </>
              ) : (
                <>
                  <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z" />
                  </svg>
                  {shareSuccess ? 'Copied!' : 'Share Profile'}
                </>
              )}
            </button>
            
            <button
              onClick={onClose}
              className="flex items-center px-8 py-3 bg-slate-100 hover:bg-slate-200 text-slate-700 rounded-xl font-semibold shadow-sm hover:shadow-md transition-all duration-300 hover:scale-105 min-w-[140px] justify-center"
            >
              <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Close
            </button>
          </div>
          
          <div className="text-center mt-6">
            <p className="text-xs text-slate-500 font-medium">
              Generated by Sage AI Coach ‚Ä¢ Your Executive Leadership Profile
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
